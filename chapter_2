// Twelve-Bar-Blues
// Write a function that prints the number 1, then "chick", then "boom", then "chick". Then print 2 followed by "chick", then "boom", then "chick". Continue the same cycle for each number up to 12

function twelveBarBlues(){
  for (let i = 1; i <= 12; i++){
    console.log(`${i}`)
    console.log("chick")
    console.log("boom")
    console.log("chick")
  }
}

twelveBarBlues()

// Fibonacci
// Create a function to generate fibonacci numbers. In this sequence, each number is the sum of the previous two starting with 0 and 1. The function should accept one argument, an index into the sequence (where 0 corresponds to the initial value 0, 4 corresponds to the value four later, which is equal to 2). e.g., fibonacci(0) = 0; fibonacci(1) = 1; fibonacci(2) = 1;

// Assume argument is a positive integer
// Approach-1: Loop
function fibonacci(num){
  var seq = []

  for (let i = 0; i <= num; i++){
    switch (i){
      case 0:
      case 1:
        seq.push(i)
        break
      default:
        seq.push(seq[i-1] + seq[i-2])
    }
  }
  console.log(seq[seq.length - 1])
}

// Approach-2: Recursion
function fibonacci2(num){
  switch (num){
    case 0:
      return 0
    case 1:
      return 1
    default:
      return fibonacci2(num-1) + fibonacci2(num-2)
  }
}

var myCount = 8
fibonacci(myCount)
console.log(fibonacci2(myCount));

// Sum-to-One-Digit
// Kaitlin sees beauty in numbers but also believes that less is more. Implement sumToOne(num) that sums a given integer's digits repeatedly until the sum is only one digit. Return that one-digit result. e.g., sumToOne(928) returns 1 => 9+2+8 = 19 => 1+9 = 10 => 1+0 = 1

// Assume the argument is a non-zero positive integer
// Approach-1: loop and modulo
function sumToOne(num){
  var sum = 0,
      done = false

  while (!done){
    while(num > 0){
      sum += num % 10
      num = Math.floor(num / 10)
    }
    if (sum % 10 == sum){
      done = true
    } else {
      num = sum
      sum = 0
    }
  }

  return sum
}

// Generate-Coin-Change
// Make generateCoinChange(cents) which accepts a number of american cents and compute how to represent that using the smallest number of coins. Common coins are pennies(1 cent), nickels(5 cents), dimes(10 cents), quarter(25 cents), half-dollar(50 cents) and dollar(100 cents)

// Assume the argument passed is a positive integer
function generateCoinChange(cents){
  var coins = [100, 50, 25, 10, 5, 1],
      names = ['Dollars', 'Half-Dollars', 'Quarters', 'Dimes', 'Nickels', 'Pennies'],
      change = {100:0, 50:0, 25:0, 10:0, 5:0, 1:0},
      input = cents

  for(let i = 0; i < coins.length; i++){
    change[coins[i]] = Math.floor(input / coins[i])
    input = input % coins[i]
  }

  console.log(`${cents} cents can be represented as:`)
  for(let i = 0; i < coins.length; i++){
    if (change[coins[i]] > 0){
      console.log(`${names[i]}: ${change[coins[i]]}`);
    }
  }
}

generateCoinChange(153)

////////////////////  or  ////////////////////

function coinChange(cents){
    var quarters = 0;
    var dimes = 0;
    var nickels = 0;
    var pennies = 0;
    for(var i = 0; i < 4; i++){
        if(cents >= 25){
            quarters++;
            cents -= 25;
            console.log(cents);
        }
       else if(cents < 25)
            break;
        }
    for(i = 1; i < 10; i++){
        if(cents >= 10){
            dimes++;
            cents -= 10;
            console.log(cents);
        }
        else if(cents < 10)
            break;
        }
    for(i = 1; i < 20; i++){
        if(cents >= 5){
            nickels++;
            cents -= 5;
        }
        else if(cents < 5)
            break;
        }
    for(i = 1; i < 10; i++){
        if(cents >= 1){
            pennies++;
            cents -= 1;
            console.log(cents);
        }
        else if(cents < 1)
            break;
        }
        var change = [
            quarters + " quarter(s)",
            dimes + " dime(s)",
            nickels + " nickle(s)",
            pennies + " pennie(s)."

        ];
        console.log(change);
    }

    coinChange(10);


    // Is-Prime
// Return whether a given integer is prime.

// Assume the argument passed is nun-zero, positive integer
// Approach - for checking if any number is prime, we need to check that it is not divisible by any number greater than 1 and less than its square root.
function isPrime(num){
  if (num <= 2){ return true }

  var sqrtNum = Math.floor(Math.sqrt(num))

  for(let i = 2; i <= sqrtNum; i++){
    if (num % i == 0){ return false}
  }
  return true
}

myNum = 89
console.log(`${myNum} isPrime : ${isPrime(myNum)}`);


// Extract-O-Matic
// 1. Create extractDigit(num, digitNum) function that given a number and a digit number, returns the digit in the corresponding position. 0 represents the 1's digit, 1 represents the 10's digit and so on. e.g., extractDigit(1824, 2) returns 8. extractDigit(1824, 7) returns 0
// 2. Handle negative digitNum values where -1 represents the tenths digit (0.x), -2 represents the hundrreths digit (0.0x) and so on. extractDigit(123.45, -1) returns 4
// 3. Handle negative values for num as well

// For 3, I am just handling it like in #1
function extractDigit(num, digit){
  if ((num % 1 == 0) && (digit < 0)){ return 0 }

  if (digit < 0){
    var whole = Math.floor(Math.abs(num) * Math.pow(10, Math.abs(digit)))
    return whole % 10
  } else {
    var whole = Math.floor(Math.abs(num)) / Math.pow(10, digit+1)
    return extractDigit(whole, -1)
  }
}

var myNum = -1824.34, myDigit = 1
console.log(`extractDigit(${myNum}, ${myDigit}) = ${extractDigit(myNum, myDigit)}`)


// Gaming-Fun
// 1. Create a function "rollone()" to return a randomly selected integer between 1 and 6 (inclusive) (6 sided dice)
// 2. Create a function "playFives(num)" to call "rollone()" 'num' times. Each time it should print the value of rollone() and if that value = 5, also print "That's good luck!"
// 3. Create a new function "playStatistics(num)" which calls "rollone()" 'num' times. After calling it 'num' times, print lowest, highest, sum and average value of the rolls

// Assume the arguments passed are non-zero positive integers
function rollOne(){
  return Math.floor(Math.random() * 6) + 1
}

function playFives(num){
  for(let i = 1; i <= num; i++){
    var roll = rollOne()

    if (roll == 5){
      console.log(`Roll = ${roll} - That's good luck!`)
    } else {
      console.log(`Roll = ${roll}`)
    }
  }
}

function playStatistics(num){
  var high = 0,
      low = 6,
      sum = 0,
      roll = 0

  for (let i = 1; i <= num; i++){
    roll = rollOne()
    high = ((high < roll) ? roll : high)
    low = ((low > roll) ? roll : low)
    sum += roll
  }
  console.log(`After ${num} rolls of the dice, Highest = ${high}; Lowest = ${low}; Sum = ${sum}; Avg = ${sum / num}`)
}

var myNum = 8
playFives(myNum)
playStatistics(myNum)
